#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GymGame.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GymGame_db")]
	public partial class GymGameModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuiz(Quiz instance);
    partial void UpdateQuiz(Quiz instance);
    partial void DeleteQuiz(Quiz instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRound(Round instance);
    partial void UpdateRound(Round instance);
    partial void DeleteRound(Round instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public GymGameModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GymGame_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GymGameModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymGameModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymGameModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymGameModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Quiz> Quizs
		{
			get
			{
				return this.GetTable<Quiz>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Round> Rounds
		{
			get
			{
				return this.GetTable<Round>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Answer_Id;
		
		private string _Answer_Text;
		
		private int _FK_Question;
		
		private System.Nullable<int> _FK_Type;
		
		private byte _Answer_value;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswer_IdChanging(int value);
    partial void OnAnswer_IdChanged();
    partial void OnAnswer_TextChanging(string value);
    partial void OnAnswer_TextChanged();
    partial void OnFK_QuestionChanging(int value);
    partial void OnFK_QuestionChanged();
    partial void OnFK_TypeChanging(System.Nullable<int> value);
    partial void OnFK_TypeChanged();
    partial void OnAnswer_valueChanging(byte value);
    partial void OnAnswer_valueChanged();
    #endregion
		
		public Answer()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Answer_Id
		{
			get
			{
				return this._Answer_Id;
			}
			set
			{
				if ((this._Answer_Id != value))
				{
					this.OnAnswer_IdChanging(value);
					this.SendPropertyChanging();
					this._Answer_Id = value;
					this.SendPropertyChanged("Answer_Id");
					this.OnAnswer_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer_Text", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Answer_Text
		{
			get
			{
				return this._Answer_Text;
			}
			set
			{
				if ((this._Answer_Text != value))
				{
					this.OnAnswer_TextChanging(value);
					this.SendPropertyChanging();
					this._Answer_Text = value;
					this.SendPropertyChanged("Answer_Text");
					this.OnAnswer_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int NOT NULL")]
		public int FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Type", DbType="Int")]
		public System.Nullable<int> FK_Type
		{
			get
			{
				return this._FK_Type;
			}
			set
			{
				if ((this._FK_Type != value))
				{
					this.OnFK_TypeChanging(value);
					this.SendPropertyChanging();
					this._FK_Type = value;
					this.SendPropertyChanged("FK_Type");
					this.OnFK_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer_value", DbType="TinyInt NOT NULL")]
		public byte Answer_value
		{
			get
			{
				return this._Answer_value;
			}
			set
			{
				if ((this._Answer_value != value))
				{
					this.OnAnswer_valueChanging(value);
					this.SendPropertyChanging();
					this._Answer_value = value;
					this.SendPropertyChanged("Answer_value");
					this.OnAnswer_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_Result", Storage="_Results", ThisKey="Answer_Id", OtherKey="FK_Answer")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="FK_Question", OtherKey="Question_Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._FK_Question = value.Question_Id;
					}
					else
					{
						this._FK_Question = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Question_Id;
		
		private string _Question_Text;
		
		private int _FK_Round;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Round> _Round;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestion_IdChanging(int value);
    partial void OnQuestion_IdChanged();
    partial void OnQuestion_TextChanging(string value);
    partial void OnQuestion_TextChanged();
    partial void OnFK_RoundChanging(int value);
    partial void OnFK_RoundChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Round = default(EntityRef<Round>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Question_Id
		{
			get
			{
				return this._Question_Id;
			}
			set
			{
				if ((this._Question_Id != value))
				{
					this.OnQuestion_IdChanging(value);
					this.SendPropertyChanging();
					this._Question_Id = value;
					this.SendPropertyChanged("Question_Id");
					this.OnQuestion_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Question_Text
		{
			get
			{
				return this._Question_Text;
			}
			set
			{
				if ((this._Question_Text != value))
				{
					this.OnQuestion_TextChanging(value);
					this.SendPropertyChanging();
					this._Question_Text = value;
					this.SendPropertyChanged("Question_Text");
					this.OnQuestion_TextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Round", DbType="Int NOT NULL")]
		public int FK_Round
		{
			get
			{
				return this._FK_Round;
			}
			set
			{
				if ((this._FK_Round != value))
				{
					if (this._Round.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RoundChanging(value);
					this.SendPropertyChanging();
					this._FK_Round = value;
					this.SendPropertyChanged("FK_Round");
					this.OnFK_RoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="Question_Id", OtherKey="FK_Question")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Result", Storage="_Results", ThisKey="Question_Id", OtherKey="FK_Question")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Round_Question", Storage="_Round", ThisKey="FK_Round", OtherKey="Round_Id", IsForeignKey=true)]
		public Round Round
		{
			get
			{
				return this._Round.Entity;
			}
			set
			{
				Round previousValue = this._Round.Entity;
				if (((previousValue != value) 
							|| (this._Round.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Round.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Round.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._FK_Round = value.Round_Id;
					}
					else
					{
						this._FK_Round = default(int);
					}
					this.SendPropertyChanged("Round");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quizzes")]
	public partial class Quiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Quiz_Id;
		
		private int _FK_Users;
		
		private string _Location;
		
		private System.DateTime _Date;
		
		private EntitySet<Result> _Results;
		
		private EntitySet<Round> _Rounds;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuiz_IdChanging(int value);
    partial void OnQuiz_IdChanged();
    partial void OnFK_UsersChanging(int value);
    partial void OnFK_UsersChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Quiz()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Rounds = new EntitySet<Round>(new Action<Round>(this.attach_Rounds), new Action<Round>(this.detach_Rounds));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quiz_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Quiz_Id
		{
			get
			{
				return this._Quiz_Id;
			}
			set
			{
				if ((this._Quiz_Id != value))
				{
					this.OnQuiz_IdChanging(value);
					this.SendPropertyChanging();
					this._Quiz_Id = value;
					this.SendPropertyChanged("Quiz_Id");
					this.OnQuiz_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Users", DbType="Int NOT NULL")]
		public int FK_Users
		{
			get
			{
				return this._FK_Users;
			}
			set
			{
				if ((this._FK_Users != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UsersChanging(value);
					this.SendPropertyChanging();
					this._FK_Users = value;
					this.SendPropertyChanged("FK_Users");
					this.OnFK_UsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_Result", Storage="_Results", ThisKey="Quiz_Id", OtherKey="FK_Quiz")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_Round", Storage="_Rounds", ThisKey="Quiz_Id", OtherKey="FK_Quiz")]
		public EntitySet<Round> Rounds
		{
			get
			{
				return this._Rounds;
			}
			set
			{
				this._Rounds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Quiz", Storage="_User", ThisKey="FK_Users", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Quizs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Quizs.Add(this);
						this._FK_Users = value.User_Id;
					}
					else
					{
						this._FK_Users = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
		
		private void attach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_Rounds(Round entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Results")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Result_Id;
		
		private int _FK_User;
		
		private int _FK_Question;
		
		private int _FK_Answer;
		
		private int _FK_Quiz;
		
		private EntityRef<Answer> _Answer;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Quiz> _Quiz;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResult_IdChanging(int value);
    partial void OnResult_IdChanged();
    partial void OnFK_UserChanging(int value);
    partial void OnFK_UserChanged();
    partial void OnFK_QuestionChanging(int value);
    partial void OnFK_QuestionChanged();
    partial void OnFK_AnswerChanging(int value);
    partial void OnFK_AnswerChanged();
    partial void OnFK_QuizChanging(int value);
    partial void OnFK_QuizChanged();
    #endregion
		
		public Result()
		{
			this._Answer = default(EntityRef<Answer>);
			this._Question = default(EntityRef<Question>);
			this._Quiz = default(EntityRef<Quiz>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Result_Id
		{
			get
			{
				return this._Result_Id;
			}
			set
			{
				if ((this._Result_Id != value))
				{
					this.OnResult_IdChanging(value);
					this.SendPropertyChanging();
					this._Result_Id = value;
					this.SendPropertyChanged("Result_Id");
					this.OnResult_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_User", DbType="Int NOT NULL")]
		public int FK_User
		{
			get
			{
				return this._FK_User;
			}
			set
			{
				if ((this._FK_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserChanging(value);
					this.SendPropertyChanging();
					this._FK_User = value;
					this.SendPropertyChanged("FK_User");
					this.OnFK_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Question", DbType="Int NOT NULL")]
		public int FK_Question
		{
			get
			{
				return this._FK_Question;
			}
			set
			{
				if ((this._FK_Question != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuestionChanging(value);
					this.SendPropertyChanging();
					this._FK_Question = value;
					this.SendPropertyChanged("FK_Question");
					this.OnFK_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Answer", DbType="Int NOT NULL")]
		public int FK_Answer
		{
			get
			{
				return this._FK_Answer;
			}
			set
			{
				if ((this._FK_Answer != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_AnswerChanging(value);
					this.SendPropertyChanging();
					this._FK_Answer = value;
					this.SendPropertyChanged("FK_Answer");
					this.OnFK_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Quiz", DbType="Int NOT NULL")]
		public int FK_Quiz
		{
			get
			{
				return this._FK_Quiz;
			}
			set
			{
				if ((this._FK_Quiz != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuizChanging(value);
					this.SendPropertyChanging();
					this._FK_Quiz = value;
					this.SendPropertyChanged("FK_Quiz");
					this.OnFK_QuizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_Result", Storage="_Answer", ThisKey="FK_Answer", OtherKey="Answer_Id", IsForeignKey=true)]
		public Answer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				Answer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._FK_Answer = value.Answer_Id;
					}
					else
					{
						this._FK_Answer = default(int);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Result", Storage="_Question", ThisKey="FK_Question", OtherKey="Question_Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._FK_Question = value.Question_Id;
					}
					else
					{
						this._FK_Question = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_Result", Storage="_Quiz", ThisKey="FK_Quiz", OtherKey="Quiz_Id", IsForeignKey=true)]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._FK_Quiz = value.Quiz_Id;
					}
					else
					{
						this._FK_Quiz = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Result", Storage="_User", ThisKey="FK_User", OtherKey="User_Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._FK_User = value.User_Id;
					}
					else
					{
						this._FK_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_Id;
		
		private string _RoleName;
		
		private int _RoleCode;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IdChanging(int value);
    partial void OnRole_IdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleCodeChanging(int value);
    partial void OnRoleCodeChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Role_Id
		{
			get
			{
				return this._Role_Id;
			}
			set
			{
				if ((this._Role_Id != value))
				{
					this.OnRole_IdChanging(value);
					this.SendPropertyChanging();
					this._Role_Id = value;
					this.SendPropertyChanged("Role_Id");
					this.OnRole_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCode", DbType="Int NOT NULL")]
		public int RoleCode
		{
			get
			{
				return this._RoleCode;
			}
			set
			{
				if ((this._RoleCode != value))
				{
					this.OnRoleCodeChanging(value);
					this.SendPropertyChanging();
					this._RoleCode = value;
					this.SendPropertyChanged("RoleCode");
					this.OnRoleCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Role_Id", OtherKey="FK_Role")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rounds")]
	public partial class Round : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Round_Id;
		
		private int _FK_Quiz;
		
		private int _Max_Time;
		
		private string _Round_name;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRound_IdChanging(int value);
    partial void OnRound_IdChanged();
    partial void OnFK_QuizChanging(int value);
    partial void OnFK_QuizChanged();
    partial void OnMax_TimeChanging(int value);
    partial void OnMax_TimeChanged();
    partial void OnRound_nameChanging(string value);
    partial void OnRound_nameChanged();
    #endregion
		
		public Round()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Round_Id
		{
			get
			{
				return this._Round_Id;
			}
			set
			{
				if ((this._Round_Id != value))
				{
					this.OnRound_IdChanging(value);
					this.SendPropertyChanging();
					this._Round_Id = value;
					this.SendPropertyChanged("Round_Id");
					this.OnRound_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Quiz", DbType="Int NOT NULL")]
		public int FK_Quiz
		{
			get
			{
				return this._FK_Quiz;
			}
			set
			{
				if ((this._FK_Quiz != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_QuizChanging(value);
					this.SendPropertyChanging();
					this._FK_Quiz = value;
					this.SendPropertyChanged("FK_Quiz");
					this.OnFK_QuizChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_Time", DbType="Int NOT NULL")]
		public int Max_Time
		{
			get
			{
				return this._Max_Time;
			}
			set
			{
				if ((this._Max_Time != value))
				{
					this.OnMax_TimeChanging(value);
					this.SendPropertyChanging();
					this._Max_Time = value;
					this.SendPropertyChanged("Max_Time");
					this.OnMax_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round_name", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Round_name
		{
			get
			{
				return this._Round_name;
			}
			set
			{
				if ((this._Round_name != value))
				{
					this.OnRound_nameChanging(value);
					this.SendPropertyChanging();
					this._Round_name = value;
					this.SendPropertyChanged("Round_name");
					this.OnRound_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Round_Question", Storage="_Questions", ThisKey="Round_Id", OtherKey="FK_Round")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_Round", Storage="_Quiz", ThisKey="FK_Quiz", OtherKey="Quiz_Id", IsForeignKey=true)]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.Rounds.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.Rounds.Add(this);
						this._FK_Quiz = value.Quiz_Id;
					}
					else
					{
						this._FK_Quiz = default(int);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Round = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Round = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_Id;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private int _FK_Role;
		
		private System.Nullable<int> _FB_UserId;
		
		private EntitySet<Quiz> _Quizs;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IdChanging(int value);
    partial void OnUser_IdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnFK_RoleChanging(int value);
    partial void OnFK_RoleChanged();
    partial void OnFB_UserIdChanging(System.Nullable<int> value);
    partial void OnFB_UserIdChanged();
    #endregion
		
		public User()
		{
			this._Quizs = new EntitySet<Quiz>(new Action<Quiz>(this.attach_Quizs), new Action<Quiz>(this.detach_Quizs));
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Role", DbType="Int NOT NULL")]
		public int FK_Role
		{
			get
			{
				return this._FK_Role;
			}
			set
			{
				if ((this._FK_Role != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_RoleChanging(value);
					this.SendPropertyChanging();
					this._FK_Role = value;
					this.SendPropertyChanged("FK_Role");
					this.OnFK_RoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FB_UserId", DbType="Int")]
		public System.Nullable<int> FB_UserId
		{
			get
			{
				return this._FB_UserId;
			}
			set
			{
				if ((this._FB_UserId != value))
				{
					this.OnFB_UserIdChanging(value);
					this.SendPropertyChanging();
					this._FB_UserId = value;
					this.SendPropertyChanged("FB_UserId");
					this.OnFB_UserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Quiz", Storage="_Quizs", ThisKey="User_Id", OtherKey="FK_Users")]
		public EntitySet<Quiz> Quizs
		{
			get
			{
				return this._Quizs;
			}
			set
			{
				this._Quizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Result", Storage="_Results", ThisKey="User_Id", OtherKey="FK_User")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="FK_Role", OtherKey="Role_Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._FK_Role = value.Role_Id;
					}
					else
					{
						this._FK_Role = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quizs(Quiz entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Quizs(Quiz entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
